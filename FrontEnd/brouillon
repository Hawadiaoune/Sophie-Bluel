/** page index  
// Création de la Fonction qui va ajouter les projets à la galerie
function ajouterTravauxAGalerie(travaux) {
  const galerieArchitecte = document.getElementById('galerie-architecte'); // Sélectionnez l'élément de la galerie dans le DOM

  // Supprimer les travaux existants avant d'ajouter les nouveaux
  galerieArchitecte.innerHTML = '';

  // Création des éléments HTML
  travaux.forEach(travail => {
    const travailElement = document.createElement('figure');
    travailElement.classList.add('travail');
    travailElement.setAttribute('data-categoryId', travail.categoryId);

    const imageElement = document.createElement('img');
    imageElement.src = travail.imageUrl;

    const figcaptionElement = document.createElement('figcaption');
    figcaptionElement.textContent = travail.title;

    // Ajout des éléments dans la galerie
    travailElement.appendChild(imageElement);
    travailElement.appendChild(figcaptionElement);
    galerieArchitecte.appendChild(travailElement);
  });
}

// Fonction pour filtrer les travaux par catégorie
function filtrerTravauxParCategorie(categorie) {
  const travaux = document.querySelectorAll('.travail');

  travaux.forEach(travail => {
    const travailCategoryId = travail.getAttribute('data-categoryId');

    if (categorie === 'tous' || travailCategoryId === categorie) {
      travail.style.display = 'block';
    } else {
      travail.style.display = 'none';
    }
  });
}

const boutonsCategories = document.querySelectorAll('#portfolio button');

boutonsCategories.forEach(bouton => {
  bouton.addEventListener('click', function () {
    const categorie = this.getAttribute('data-categoryId');
    filtrerTravauxParCategorie(categorie);
  });
});


// Récupération des données de l'API via fetch et ajout des nouveaux projets à la galerie
async function recupererTravauxArchitecte() {
  try {
    const response = await fetch('http://localhost:5678/api/works');
    const travaux = await response.json();
    ajouterTravauxAGalerie(travaux);
  } catch (error) {
    console.error('Erreur lors de la récupération des travaux :', error);
  }
}

// Appel de la fonction pour récupérer et ajouter les travaux à la galerie
recupererTravauxArchitecte();
*/



/*     <section id="login">
        <h2>Log In</h2>
        <form id="loginForm" method="post">
            <label for="username">Email</label>
            <input type="text" id="username" required>

            <label for="password">Mot de passe</label>
            <input type="password" id="password" required>

            <button id="soumission" type="submit" onclick="handleLoginFormSubmit()">Se connecter</button>
        </form>
        <p id="loginMessage"></p>
    </section>*/

/* Page Login

function handleLoginFormSubmit(event) {
	event.preventDefault();

	// Récupérer les valeurs des champs du formulaire
	const username = document.getElementById('username').value;
	const password = document.getElementById('password').value;


    	// Vérifier les identifiants et mots de passe
	if (username === 'sophie.bluel@test.tld' && password === 'S0phie') {
		// Identifiants et mots de passe corrects
		const successMessage = "Connexion réussie ! Bienvenue, " + username + " !";
		showSuccessMessage(successMessage);
		redirectToHomePage();
	} else {
		// Identifiants et mots de passe incorrects
		const errorMessage = "Erreur dans l'identifiant ou le mot de passe";
		showErrorMessage(errorMessage);
	}
}

// Fonction pour afficher un message de succès
function showSuccessMessage(message) {
	const loginMessage = document.getElementById('loginMessage');
	loginMessage.textContent = message;
	loginMessage.style.color = 'green';
}

// Fonction pour afficher un message d'erreur
function showErrorMessage(message) {
	const loginMessage = document.getElementById('loginMessage');
	loginMessage.textContent = message;
	loginMessage.style.color = 'red';
}

// Fonction pour rediriger vers la page d'accueil
function redirectToHomePage() {
	window.location.href = './index.html';
  recupererTravauxArchitecte(); 
}


	// Construire les données du formulaire à envoyer
	const formData = new FormData();
	formData.append('username', username);
	formData.append('password', password);



	// Envoyer la requête POST avec les identifiants de connexion


fetch('http://localhost:5678/api/users/login', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(formData)
})
  .then(response => response.json())
  .then(data => {
    if (data.userId && data.token) {
      // Authentification réussie
      const userId = data.userId;
      const token = data.token;

      // Stocker l'ID utilisateur et le token dans le stockage local
      localStorage.setItem('userId', userId);
      localStorage.setItem('token', token);

      // Rediriger vers la page d'accueil avec les boutons d'actions pour éditer le site
      redirectToHomePageWithActions();
      
    } else {
      // Erreur d'authentification
      const loginMessage = document.getElementById('loginMessage');
      loginMessage.textContent = 'Erreur dans l’identifiant ou le mot de passe';
      loginMessage.style.color = 'red';
    }
  })
  .catch(error => {
    // Gérer les erreurs de la requête
    console.error('Erreur lors de la requête de connexion:', error);
  });





// Écouter l'événement de soumission du formulaire
const loginForm = document.getElementById('loginForm');
loginForm.addEventListener('submit', handleLoginFormSubmit);

*/




function handleLoginFormSubmit(event) {
  event.preventDefault(); // Empêcher l'envoi du formulaire par défaut

  // Récupérer les valeurs des champs d'identifiant et de mot de passe
  const username = document.getElementById('username').value;
  const password = document.getElementById('password').value;

  // Vérifier si le couple identifiant et mot de passe est valide
  if (username === 'admin' && password === 'password') {
    // Rediriger vers la page du site avec les boutons d'actions
    window.location.href = 'index.html';
  } else {
    // Afficher le message d'erreur
    const errorMessage = document.getElementById('error-message');
    errorMessage.textContent = 'Erreur dans l\'identifiant ou le mot de passe';
  }
}

// Ajouter un écouteur d'événement sur la soumission du formulaire
const loginForm = document.getElementById('login-form');
loginForm.addEventListener('submit', handleLoginFormSubmit);




/*


// Fonction pour gérer la soumission du formulaire
function handleLoginFormSubmit(event) {
	event.preventDefault();

	// Récupérer les valeurs des champs du formulaire
	const username = document.getElementById('username').value;
	const password = document.getElementById('password').value;

	// Vérifier les identifiants et mots de passe
	if (username === 'sophie.bluel@test.tld' && password === 'S0phie') {
		// Identifiants et mots de passe corrects
		const successMessage = "Connexion réussie ! Bienvenue, " + username + " !";
		showSuccessMessage(successMessage);
		redirectToHomePage();
	} else {
		// Identifiants et mots de passe incorrects
		const errorMessage = "Erreur dans l'identifiant ou le mot de passe";
		showErrorMessage(errorMessage);
	}
}

// Fonction pour afficher un message de succès
function showSuccessMessage(message) {
	const loginMessage = document.getElementById('loginMessage');
	loginMessage.textContent = message;
	loginMessage.style.color = 'green';
}

// Fonction pour afficher un message d'erreur
function showErrorMessage(message) {
	const loginMessage = document.getElementById('loginMessage');
	loginMessage.textContent = message;
	loginMessage.style.color = 'red';
}

// Fonction pour rediriger vers la page d'accueil
function redirectToHomePage() {
	window.location.href = './index.html';
}

// Écouter l'événement de soumission du formulaire
const loginForm = document.getElementById('loginForm');
loginForm.addEventListener('submit', handleLoginFormSubmit); */
*/


/** Page login */

// Fonction pour gérer la soumission du formulaire
function handleLoginFormSubmit(event) {
    event.preventDefault();
  
    // Récupérer les valeurs des champs du formulaire
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
  
    // Vérifier les identifiants et mots de passe
    if (username === 'sophie.bluel@test.tld' && password === 'S0phie') {
      // Identifiants et mots de passe corrects
      const successMessage = "Connexion réussie ! Bienvenue, " + username + " !";
      showSuccessMessage(successMessage);
      redirectToHomePage();
    } else {
      // Identifiants et mots de passe incorrects
      const errorMessage = "Erreur dans l'identifiant ou le mot de passe";
      showErrorMessage(errorMessage);
    }
  }
  
  // Fonction pour afficher un message de succès
  function showSuccessMessage(message) {
    const loginMessage = document.getElementById('loginMessage');
    loginMessage.textContent = message;
    loginMessage.style.color = 'green';
  }
  
  // Fonction pour afficher un message d'erreur
  function showErrorMessage(message) {
    const loginMessage = document.getElementById('loginMessage');
    loginMessage.textContent = message;
    loginMessage.style.color = 'red';
  }
  
  // Fonction pour rediriger vers la page d'accueil
  function redirectToHomePage() {
    window.location.href = './index.html';
  }
  
  // Écouter l'événement de soumission du formulaire
  const loginForm = document.getElementById('loginForm');
  loginForm.addEventListener('submit', handleLoginFormSubmit);



  <!-- Modale pour l'ajout de photo -->
<div id="addPhotoModal" class="modal">
	<div class="modal-content">
	  <span class="close" >&times;</span>
	  <h3>Ajout photo</h3>
	  <!-- Contenu de la modale d'ajout de photo -->
	  <section>
		<h4>+Ajouter Photo, jpg, png, 4 Mo max</h4>
		<form id="addImageForm">
			<input type="file" name="image" id="imageInput" accept="image/*">
		</form>

	  </section>
	  <section>
		<h4>Titre</h4>
		<input type="text" name="title" id="imageTitle" />
	  </section>
	  <section>
		<h4>Catégorie</h4>
		<input type="text" name="category" id="imageCategory" />
	  </section>
	  <button id="saveImageButton">Valider</button>
	</div>
  </div>




  /*

// Création de la Fonction qui va ajouter les projets à la galerie
function ajouterTravauxAGalerie(travaux) {
  const galerieArchitecte = document.getElementById('galerie-architecte'); // Sélectionnez l'élément de la galerie dans le DOM

  // Supprimer les travaux existants avant d'ajouter les nouveaux
  galerieArchitecte.innerHTML = '';

  // création des éléments HTML
  travaux.forEach(travail => {
    const travailElement = document.createElement('figure');
    travailElement.classList.add('travail'); 
    travailElement.setAttribute('data-categoryId', travail.categoryId);

    const imageElement = document.createElement('img');
    imageElement.src = travail.imageUrl;

    const figcaptionElement = document.createElement('figcaption');
    figcaptionElement.textContent = travail.title;

    //ajout des éléments dans la galerie
    travailElement.appendChild(imageElement);
    travailElement.appendChild(figcaptionElement);
    galerieArchitecte.appendChild(travailElement);
  });
}

// Création du filtre par categorie
function filtrerTravauxParCategorie(categorie) {
  const travaux = document.querySelectorAll('.travail');

  travaux.forEach(travail => {
    const travailCategoryId = travail.getAttribute('data-categoryId');

    if (categorie === 'tous' || travailCategoryId === categorie) {
      travail.style.display = 'block';
    } else {
      travail.style.display = 'none';
    }
  });
}

const boutonsCategories = document.querySelectorAll('#portfolio button');

boutonsCategories.forEach(bouton => {
  bouton.addEventListener('click', function () {
    const categorie = this.getAttribute('data-categoryId');
    filtrerTravauxParCategorie(categorie);
  });
});


// Récupération des données de l'API via fetch + création de la variable contenant les nouveaux projets
async function recupererTravauxArchitecte() {
  try {
    const response = await fetch('http://localhost:5678/api/works');
    const travaux = await response.json(); // Convertit la réponse en JSON
    ajouterTravauxAGalerie(travaux); // Traite les données récupérées et les ajoute à la galerie
  } catch (error) {
    console.error('Erreur lors de la récupération des travaux :', error);
  }
}

// Appel de la fonction pour récupérer et ajouter les travaux à la galerie
recupererTravauxArchitecte();



//* Modale connexion/deconnexion

// Sélectionne l'élément du lien de connexion/logout
const loginLink = document.getElementById('loginLink');

// Vérifie si un token d'authentification est présent dans le stockage local
const token = localStorage.getItem('token');
if (token) {
  // Si un token est présent, cela signifie que l'utilisateur est connecté
  // Masque le lien de connexion et affiche le lien de déconnexion
  loginLink.textContent = 'Logout';
}

// Ajoute un écouteur d'événement au lien de connexion/logout
loginLink.addEventListener('click', handleLoginLogout);

function handleLoginLogout() {
  if (token) {
    // Si un token est présent, cela signifie que l'utilisateur est connecté
    // Effectue ici les étapes de déconnexion

    // Supprime le token du stockage local
    localStorage.removeItem('token');

    // Redirige vers la page de login
    window.location.href = './index.html';
  } else {
    // Si aucun token n'est présent, cela signifie que l'utilisateur n'est pas connecté
    // Redirige vers la page de login
    window.location.href = './login.html';
  }
}

// Fonction pour mettre à jour l'affichage du bouton de connexion/logout dans la barre de navigation
function updateLoginButton() {
  const loginLink = document.getElementById('loginLink');

  // Vérifier si un token est présent
  const token = localStorage.getItem('token');
  if (token) {
    // Si un token est présent, cela signifie que l'utilisateur est connecté
    // Afficher "Logout" sur le bouton de connexion/logout
    loginLink.textContent = 'Logout';
  } else {
    // Si aucun token n'est présent, cela signifie que l'utilisateur n'est pas connecté
    // Afficher "Login" sur le bouton de connexion/logout
    loginLink.textContent = 'Login';
  }
}

// Appeler la fonction pour mettre à jour l'affichage du bouton de connexion/logout au chargement de la page
window.addEventListener('load', updateLoginButton);

// Écouter l'événement de clic sur le bouton de connexion/logout
loginLink.addEventListener('click', handleLoginLogout);

//* Modale 1

document.addEventListener('DOMContentLoaded', function() {
  const btnModifier = document.getElementById('btnModifier');
  const modal = document.getElementById('modal');
  const closeBtn = document.querySelector('.close');

  // Vérifier si l'utilisateur est connecté
  const token = localStorage.getItem('token');

  if (token) {
    // Afficher le bouton "Modifier" si l'utilisateur est connecté
    btnModifier.style.display = 'block';
  }

  // Ajouter un écouteur d'événement pour le clic sur le bouton "Modifier"
  btnModifier.addEventListener('click', ouvrirModal);

  function ouvrirModal() {
    // Vérifiez si un token d'authentification est présent dans le stockage local
    const token = localStorage.getItem('token');
    if (token) {
      // Si un token est présent, cela signifie que l'utilisateur est connecté
      // Affiche la modale
      modal.style.display = 'block';
    } else {
      // Si aucun token n'est présent, cela signifie que l'utilisateur n'est pas connecté
      // Redirige vers la page de login
      window.location.href = './login.html';
      modal.style.display = 'none';
    }
  }

  closeBtn.addEventListener('click', fermerModal);

  function fermerModal() {
    modal.style.display = 'none';
  }
});

// Fonction pour générer le contenu de la modale avec la galerie des travaux
function generateModalContent(travaux) {
  const modal = document.getElementById('modal');

  // Supprimer le contenu existant de la modale
  modal.innerHTML = '';

  travaux.forEach(travail => {
    const travailElement = document.createElement('div');
    travailElement.classList.add('travail');

    const imageElement = document.createElement('img');
    imageElement.src = travail.imageUrl;
    travailElement.appendChild(imageElement);

    // Ajouter l'icône poubelle pour supprimer la photo
    const deleteIcon = document.createElement('i');
    deleteIcon.classList.add('fas', 'fa-trash-alt', 'delete-icon');
    deleteIcon.addEventListener('click', () => deleteImage(travail.id)); // Appel de la fonction deleteImage avec l'ID du travail
    travailElement.appendChild(deleteIcon);

    // Ajouter le bouton editer
    const editButton = document.createElement('button');
    editButton.classList.add('edit-button');
    editButton.textContent = 'Éditer';
    travailElement.appendChild(editButton);

    // Ajouter la div du travail à la modale
    modal.appendChild(travailElement);
  });
}

// Appel de la fonction pour récupérer les travaux via fetch
async function recupererTravauxArchitecte() {
  try {
    const response = await fetch('http://localhost:5678/api/works');
    const travaux = await response.json();
    generateModalContent(travaux); // Appel de la fonction pour générer le contenu de la modale avec les travaux
  } catch (error) {
    console.error('Erreur lors de la récupération des travaux :', error);
  }
}

// Écouter l'événement de clic sur le bouton "Modifier" pour ouvrir la modale
const modifierButton = document.getElementById('btnModifier');
modifierButton.addEventListener('click', () => {
  const modal = document.getElementById('modal');
  modal.style.display = 'block'; // Afficher la modale lorsque le bouton "Modifier" est cliqué
});

// Fonction pour supprimer une image via l'API
async function deleteImage(imageId) {
  try {
    const response = await fetch(`http://localhost:5678/api/works/${imageId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': 'Bearer ' + token,
      },
    });

    if (response.ok) {
      // La suppression a réussi
      // Supprimer l'élément de la photo du DOM correspondant
      const photoElement = document.querySelector(`img[data-id="${imageId}"]`);
      if (photoElement) {
        photoElement.remove();
      }
    } else {
      console.error('La suppression de l\'image a échoué :', response.status, response.statusText);
    }
  } catch (error) {
    console.error('Erreur lors de la suppression de l\'image :', error);
  }
}

// récuperation des données de l'API via fetch + création de la variable contenant les nouveaux projets
async function recupererTravauxArchitecte() {
  try {
    const response = await fetch('http://localhost:5678/api/works');
    const travaux = await response.json(); // Convertit la réponse en JSON
    ajouterTravauxAGalerie(travaux); // Traite les données récupérées et les ajoute à la galerie
  } catch (error) {
    console.error('Erreur lors de la récupération des travaux :', error);
  }
}

// Appel de la fonction pour récupérer et ajouter les travaux à la galerie
recupererTravauxArchitecte();

*/